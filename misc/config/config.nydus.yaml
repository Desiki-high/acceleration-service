# Configuration file of Harbor Acceleration Service

# http related config
server:
  name: API
  # listened host for http
  host: 0.0.0.0
  # port for http
  port: 2077

metric:
  # export metrics on `/metrics` endpoint
  enabled: true

provider:
  source:
    # hostname of harbor service
    hub.harbor.com:
      # base64 encoded `<robot-name>:<robot-secret>` for robot
      # account created in harbor
      # auth: YTpiCg==
      # skip verifying server certs for HTTPS source registry
      insecure: false
      webhook:
        # webhook request auth header configured in harbor
        auth_header: header
    localhost:
      # If auth is not provided, it will attempt to read from docker config
      # auth: YWRtaW46SGFyYm9yMTIzNDU=
  # work directory of acceld
  work_dir: /tmp
  gcpolicy:
      # size threshold that triggers GC, the oldest used blobs will be reclaimed if exceeds the size.
      threshold: 1000MB
  # remote cache record capacity of converted layers, default is 200.
  cache_size: 200

converter:
  # number of worker for executing conversion task
  worker: 5
  # enable to add harbor specified annotations to converted image for tracking.
  harbor_annotation: true
  # only convert images for specific platforms, leave empty for all platforms.
  # platforms: linux/amd64,linux/arm64
  driver:
    # accelerator driver type: `nydus`
    type: nydus
    config:
      work_dir: /tmp

      # `nydus-image` binary path, download it from:
      # https://github.com/dragonflyoss/image-service/releases (require v2.0.0 or higher)
      # builder: nydus-image

      # convert to OCI-referenced nydus zran image.
      # oci_ref: false

      # with this option, we can track all nydus images associated with
      # an OCI image. For example, in Harbor we can cascade to show nydus
      # images linked to an OCI image, deleting the OCI image can also delete
      # the corresponding nydus images. At runtime, nydus snapshotter can also
      # automatically upgrade an OCI image run to nydus image.
      with_referrer: true

      # specify nydus format version, possible values: `5`, `6` (EROFS-compatible), default is `6`
      # fs_version: 6

      # specify nydus blob compression algorithm, possible values: `none`, `lz4_block`, `gzip`, `zstd`, default is `zstd`
      # compressor: zstd

      # ensure that both OCIv1 manifest and nydus manifest are present as manifest index in the target image.
      # it's used for containerd to support running OCIv1 image or nydus image simultaneously with a single image reference.
      # note: please ensure that OCIv1 manifest already exists in target image reference.
      # merge_manifest: true

      # nydus chunk dict image reference, used for chunk-leveled data deduplication.
      # chunk_dict_ref: localhost/chunk_dict/image:latest

      # enable to convert Docker media types into OCI ones.
      # docker2oci: false

      # enable to align uncompressed data chunks to 4K, only for fs version 5.
      # fs_align_chunk: false

      # set the size of data chunks, must be power of two and between 0x1000-0x1000000.
      # fs_chunk_size: 0x100000

      # file path pattern list (split by new line) want to prefetch.
      # prefetch_patterns: /

      # force to push blobs even if they already exist in storage backend.
      # backend_force_push: false

      # specify a storage backend for storing nydus blob, optional, possible values: oss, localfs, s3
      # backend_type: oss
      # backend_config: '{"endpoint":"","access_key_id":"","access_key_secret":"","bucket_name":""}'

      # backend_type: localfs
      # backend_config: '{"dir":"/path/to/dir"}'

      # backend_type: s3
      # backend_config: '{"scheme":"","endpoint":"","region":"","bucket_name":"","access_key_id":"","access_key_secret":"","object_prefix":""}'
  rules:
    # add suffix to tag of source image reference as target image reference
    - tag_suffix: -nydus
    # set tag of source image reference as remote cache reference, leave empty to disable remote cache.
    - cache_tag: nydus-cache
